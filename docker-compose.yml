services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - travel-agency-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - travel-agency-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - travel-agency-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - travel-agency-network

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - travel-agency-network

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - travel-agency-network

  stakeholders-db:
    image: postgres:15
    container_name: stakeholders-db
    environment:
      POSTGRES_DB: stakeholders
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: super
    ports:
      - "5434:5432"
    volumes:
      - stakeholders_data:/var/lib/postgresql/data
    networks:
      - travel-agency-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d stakeholders"]
      interval: 10s
      timeout: 5s
      retries: 5

  tours-db:
    image: postgres:15
    container_name: tours-db
    environment:
      POSTGRES_DB: tours
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: super
    ports:
      - "5433:5432"
    volumes:
      - tours_data:/var/lib/postgresql/data
    networks:
      - travel-agency-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d tours"]
      interval: 10s
      timeout: 5s
      retries: 5

  blog-db:
    image: postgres:15
    container_name: blog-db
    environment:
      POSTGRES_DB: blog
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: super
    ports:
      - "5435:5432"
    volumes:
      - blog_data:/var/lib/postgresql/data
    networks:
      - travel-agency-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d blog"]
      interval: 10s
      timeout: 5s
      retries: 5

  stakeholders-service:
    build:
      context: ./services/stakeholders-service
      dockerfile: Dockerfile
    container_name: stakeholders-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=stakeholders-db;Port=5432;Database=stakeholders;Username=postgres;Password=super
      - JWT_KEY=explorer_secret_key_very_long_and_secure_key_for_production
      - JWT_ISSUER=travel-agency
      - JWT_AUDIENCE=travel-agency-users
    ports:
      - "5001:80"
    depends_on:
      stakeholders-db:
        condition: service_healthy
      elasticsearch:
        condition: service_started
    networks:
      - travel-agency-network
    volumes:
      - ./logs:/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  tour-service:
    build:
      context: ./services/tour-service
      dockerfile: Dockerfile
    container_name: tour-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=tours-db;Port=5432;Database=tours;Username=postgres;Password=super
      - JWT_KEY=explorer_secret_key_very_long_and_secure_key_for_production
      - JWT_ISSUER=travel-agency
      - JWT_AUDIENCE=travel-agency-users
    ports:
      - "5002:80"
    depends_on:
      tours-db:
        condition: service_healthy
      elasticsearch:
        condition: service_started
    networks:
      - travel-agency-network
    volumes:
      - ./logs:/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  blog-service:
    build:
      context: ./services/blog-service
      dockerfile: Dockerfile
    container_name: blog-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://blog-db:5432/blog
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=super
      - SERVER_PORT=8080
    ports:
      - "5003:8080"
    depends_on:
      blog-db:
        condition: service_healthy
      elasticsearch:
        condition: service_started
    networks:
      - travel-agency-network
    volumes:
      - blog_uploads:/app/uploads
      - ./logs:/logs
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3

  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ASPNETCORE_URLS=http://+:80
      - JWT_KEY=explorer_secret_key_very_long_and_secure_key_for_production
      - JWT_ISSUER=travel-agency
      - JWT_AUDIENCE=travel-agency-users
      - STAKEHOLDERS_SERVICE_URL=http://stakeholders-service:80
      - TOUR_SERVICE_URL=http://tour-service:80
      - BLOG_SERVICE_URL=http://blog-service:8080
    ports:
      - "5000:80"
    depends_on:
      stakeholders-service:
        condition: service_started
      tour-service:
        condition: service_started
      blog-service:
        condition: service_started
      elasticsearch:
        condition: service_started
    networks:
      - travel-agency-network
    volumes:
      - ./logs:/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: travel-agency-frontend
    ports:
      - "8081:8080"
    depends_on:
      - gateway
    networks:
      - travel-agency-network
    environment:
      - NODE_ENV=production
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  stakeholders_data:
  tours_data:
  blog_data:
  blog_uploads:
  elasticsearch_data:
  prometheus_data:
  grafana_data:

networks:
  travel-agency-network:
    driver: bridge